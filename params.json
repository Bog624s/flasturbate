{"name":"Flasturbate","tagline":"A SWF obfuscator.","body":"Where's the source?\r\n-------------------\r\n\r\n[Flasturbate][] is part of a fork of RABCDAsm (A Robust ABC Assembler/Disassembler).\r\n\r\nYou can find the full source here,\r\n\r\n[Teesquared's fork of RABCDAsm][]\r\n\r\nFollow the \"Compiling from source\" instruction there and you will also build flasturbate.exe.\r\n\r\n  [Flasturbate]: https://github.com/Teesquared/flasturbate\r\n  [Teesquared's fork of RABCDAsm]: https://github.com/Teesquared/RABCDAsm\r\n\r\nUsage\r\n-----\r\n\r\n[Flasturbate][] is a command line program. You pass in options and the SWF file or files your want to obfuscate.\r\nBy default it will produce an output file with all qualified symbols obfuscated.\r\n\r\nThe program currently only obfuscates symbol names. It does not alter bytecodes to thwart disassembly but it sure makes reading the code in a SWF really hard to understand.\r\n\r\nSince it's built on a powerful assembler/disassembler, the future may see a version that does mangle bytecodes.\r\n\r\n    D:\\projects\\github\\Teesquared\\flasturbate\r\n    >flasturbate -h\r\n    Usage: flasturbate [OPTION] FILE ...\r\n    A tool that let's you play with your swf.\r\n    \r\n    Options:\r\n          --allowDebug               allow enable debugger tags and debug opcodes\r\n      -e, --excludes=FILE            exclude names that match any listed in FILE\r\n          --fart                     don't use this option\r\n      -f, --fixed=FILE               use a fixed renaming for names listed in FILE\r\n          --funny                    this option is undocumented\r\n      -g, --globalFile=FILE          the global file to use (multiple supported, default: \"./playerglobal.swc\")\r\n      -h, --help                     display this help and exit\r\n      -i, --includes=FILE            include names that match any listed in FILE\r\n      -j, --json                     the symbol name of a json binary tag to process (multiple supported)\r\n      -n, --namePrefix               prefix for each generated name (default: \"\")\r\n      -o, --outputExt                the output file extension (default: \"out\")\r\n      -q, --quiet                    do not print renames\r\n      -t, --test                     load a swf, write it back out, and report any inconsistencies\r\n      -v, --verbose                  enable verbose output\r\n          --version                  output version information and exit\r\n    \r\n      \"Live long and flasturbate.\"\r\n\r\nPlatforms\r\n---------\r\n\r\n[Flasturbate][] was developed for and runs under Windows 7 64 bit.\r\nThe base engine should work on Macs, but it is untested.\r\nIf you are building it on a different platform, use the \"--test\" option. This will read and write out the SWF.\r\nIt reports any inconsistency. So if it works, you're in good shape.\r\n\r\nExample\r\n-------\r\n\r\nThe best way to learn to flasturbate, is to watch someone do it. So here's an example.\r\n\r\nDownload and build Adam Atomic's [mode][] program. Make sure you build the release version.\r\nIt doesn't make sense to obfuscate a debug program so flasturbate will complain if you try to do it.\r\n\r\n[mode]: https://github.com/AdamAtomic/Mode\r\n\r\nFirst, make sure the program works by running mode.swf (e.g. double click on it and run it in Flash Player).\r\n\r\nIf that works, then great. Play the game a little and email Adam and tell him it's too hard (j/k tell him you think it's fun and a great test bed!).\r\n\r\nNext, make sure you have a copy of playerglobal.swc. This file defines many global symbols that flasturbate cannot obfuscate.\r\nIf you don't use it then classes like \"MovieClip\" and \"Sprite\" will get renamed and your program won't work. If flasturbate cannot find a global file, it will fail. You can download the latest playerglobal.swc from Adobe [here](http://www.adobe.com/support/flashplayer/downloads.html).\r\n\r\nYou can tell flasturbate where your playerglobal.swc is by using the \"--globalFile\" option or just copy the file to the same directory you run flasturbate from and it will find it by default.\r\n\r\nFor this example, just copy playerglobal.swc and mode.swf to the same directory where flasturbate.exe is. Then run this,\r\n\r\n    D:\\projects\\github\\Teesquared\\flasturbate\r\n    >flasturbate mode.swf\r\n    FRM: Preloader => 1t84s0\r\n    EXP: org.flixel.FlxGame_SndBeep => 1t11s0.1t11s1.1t684s0\r\n    ABC: org.flixel => 1t11s0.1t11s1\r\n    ABC: FlxState => 1t12s0\r\n    ABC: FlxSound => 1t16s0\r\n    ABC: FlxCamera => 1t20s0\r\n    ABC: FlxBasic => 1t21s0\r\n    ABC: FlxGame => 1t22s0\r\n    ABC: FlxObject => 1t35s0\r\n    ABC: FlxPath => 1t36s0\r\n    ABC: FlxPoint => 1t37s0\r\n    ABC: FlxRect => 1t38s0\r\n    ABC: FlxTimer => 1t39s0\r\n    ABC: org.flixel.system => 1t11s0.1t11s1.1t41s0\r\n    ABC: FlxQuadTree => 1t42s0\r\n    ABC: org.flixel.system.replay => 1t11s0.1t11s1.1t41s0.1t44s0\r\n    ...\r\n\r\nNow you'll see a new file \"mode.swf.out\" in the same directory. Rename it to my-first-flasturbation.swf (or whatever) and run it...\r\n\r\nCongratulations! You just flasturbated. I'm sure it's something you'll never forget :)\r\n\r\nYou're probably pretty happy right now. You just produced a good obfuscation. You didn't hurt your swf. And you have a warm fuzzy feeling inside. But something is not right. Your obfuscation just slightly missed the target. The game saves its state in a shared object file (sol). In this case, it has only one variable it saves which is \"plays\". You need to tell flasturbate to always obfuscate the variable \"plays\" the same way. You can do this by putting it in a text file and using the \"--fixed\" option.\r\n\r\n    D:\\projects\\github\\Teesquared\\flasturbate\r\n    >type mode-fixed.txt\r\n    plays\r\n    \r\n    D:\\projects\\github\\Teesquared\\flasturbate\r\n    >flasturbate -f mode-fixed.txt mode.swf\r\n    ...\r\n    ABC: plays => 1f5\r\n    ...\r\n\r\nNow if you make changes and release a new version of the game, when you obfuscate it again, the variable \"plays\" will always be renamed to the wonderfully descriptive name \"1f5\".\r\n\r\nWhen you flasturbate, the output looks like a total mess. It's actually very useful to see what it's doing.\r\n\r\nSo looking at a sample,\r\n\r\n    ...\r\n    ABC: org.flixel.system.replay => 1t11s0.1t11s1.1t41s0.1t44s0\r\n    ...\r\n\r\nThis shows you the tag (a DoABC tag), the symbol name (org.flixel.system.replay), and the obfuscated new symbol name (1t11s0.1t11s1.1t41s0.1t44s0 ... don't you just love the sound of that?).\r\n\r\nIf you have a problem with a flasturbated SWF, the flash exception dialog will display an obfuscated name. You can refer back to the output of flasturbate to see which source file that comes from.\r\n\r\nThis is one of the complications of obfuscation in a language like ActionScript that supports reflection. There are situations in your code where the variable name must not change. The shared object variable name above is an example of when it must be a fixed value. There are cases where the variable must not be renamed at all (like MovieClip and Sprite). Flasturbate has an option called \"--excludes\" where you can list each name you want excluded from obfuscation. Plus you can provide multiple global files (playerglobal or airglobal, RSL SWC(s), and ANE(s)). All symbols in those globals will be excluded as well.\r\n\r\nAnother example of a problem with obfuscation is when you use json. In ActionScript, when you load the json file, it returns a dynamic object with properties named using the names defined in the json name/value pairs. For example, let's say I have a json file that defines a value named \"funny\". My ActionScript would try to access it using a property called \"funny\" on the object returned from the json parser (say \"obj.funny\"). After obfuscation, the code may turn into \"obj.1t12s0\" which is clearly not \"funny\". To solve this problem for json that is embedded as a binary tag in the SWF, you can use the \"--json\" option and flasturbate will also obfuscate your json data using the same symbol name mapping for the ActionScript code that uses it. Even though it's still not \"funny\", now no one thinks it's \"funny\", and it works. Got it? If you load json data dynamicly at runtime, then you will need to obfuscate it manually using the symbol map that flasturbate outputs or just add all the json names to a text file and use the \"--excludes\" option.\r\n\r\nThe moral of the story is: flasturbation is a great form of protection but you have to be careful. If you're not careful then you will break your SWF and no one wants a broken SWF.\r\n\r\nfunny?\r\n------\r\n\r\n    D:\\projects\\github\\Teesquared\\flasturbate\r\n    >flasturbate --funny\r\n      \"Once you flasturbate, you'll never have a fake obfuscation again.\"\r\n\r\n","google":"flasturbate","note":"Don't delete this file! It's used internally to help with page regeneration."}